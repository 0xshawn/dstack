#!/bin/sh
INITDATA_DIR=/initdata
KMFS_WORK_DIR=/kmfs
CFG_DIR=${KMFS_WORK_DIR}/config
TMP_CA_CERT=${CFG_DIR}/certs/tmp-ca.cert
TMP_CA_KEY=${CFG_DIR}/certs/tmp-ca.key
CA_CERT=${CFG_DIR}/certs/ca.cert
CFG_FILE=${CFG_DIR}/config.json
APP_COMPOSE_FILE=${CFG_DIR}/docker-compose.yaml

kmfs_premount() {
    local key_phrase rootfs_hash app_id kms_url
    local actual_rootfs_hash

    # Copy config files to memory
    mkdir -p /config || panic "FSINIT: Failed to create /config directory"
    mount -t 9p -o trans=virtio,version=9p2000.L config /config || panic "FSINIT: Failed to mount config"

    mkdir -p ${CFG_DIR} || panic "FSINIT: Failed to create ${CFG_DIR} directory"
    cp /config/* ${CFG_DIR}/ || panic "FSINIT: Failed to copy config files to ${CFG_DIR}"

    # Calculate rootfs and app ids and extend them to RTMR
    if [ ! -f "${CFG_FILE}" ]; then
        panic "FSINIT: Config file ${CFG_FILE} does not exist"
    fi

    if [ ! -f "${APP_COMPOSE_FILE}" ]; then
        panic "FSINIT: Docker compose file ${APP_COMPOSE_FILE} does not exist"
    fi

    rootfs_hash=$(jq -r .rootfs_hash ${CFG_FILE})
    app_id=$(iohash sha256 -o! -t- -i ${APP_COMPOSE_FILE})
    kms_url=$(jq -r .kms_url ${CFG_FILE})

    echo "FSINIT: Extending rootfs hash to RTMR, hash=${rootfs_hash}"
    tdxctl extend -i 3 --digest ${rootfs_hash} --associated-data "rootfs-hash" || panic "FSINIT: Failed to extend rootfs to RTMR"
    echo "FSINIT: Extending app id to RTMR, app_id=${app_id}"
    tdxctl extend -i 3 --digest ${app_id} --associated-data "app-id" || panic "FSINIT: Failed to extend app id to RTMR"

    # Show the RTMR
    tdxctl show

    # Generate temp cert for RA-TLS
    echo "FSINIT: Generating RA-TLS cert"
    mkdir -p ${KMFS_WORK_DIR}/certs
    tdxctl gen-ra-cert \
        -c ${KMFS_WORK_DIR}/certs/cert.pem \
        -k ${KMFS_WORK_DIR}/certs/key.pem \
        --ca-cert ${TMP_CA_CERT} \
        --ca-key ${TMP_CA_KEY} || panic "FSINIT: Failed to generate RA-TLS cert"

    # Request app keys from KMS
    echo "FSINIT: Requesting app keys from KMS"
    wget --ca-certificate=${CA_CERT} \
        --certificate=${KMFS_WORK_DIR}/certs/cert.pem \
        --private-key=${KMFS_WORK_DIR}/certs/key.pem \
        -O ${KMFS_WORK_DIR}/appkey.json \
        ${kms_url}/prpc/KMS.GetAppKey \
        -q || panic "FSINIT: Failed to request app keys"

    key_phrase=$(jq -r .disk_crypt_key ${KMFS_WORK_DIR}/appkey.json)

    if [ -e /config/format-disk ]; then
        # Set up disk encryption and format the disk

        [ -z "${INITIMG}" ] && panic "FSINIT: initimg not set"

        echo "FSINIT: Mounting init image ${INITIMG}"
        mkdir -p ${INITDATA_DIR} || panic "FSINIT: Failed to create ${INITDATA_DIR}"

        if [ -z "${INITIMGTYPE}" ]; then
            case "${INITIMG}" in
                /dev/cdrom*|/dev/sr*)
                    INITIMGTYPE="-t iso9660"
                    ;;
            esac
        fi
        mount ${INITIMGTYPE} -o ro ${INITIMG} ${INITDATA_DIR} || panic "FSINIT: Failed to mount init image"

        echo "FSINIT: Initializing"
        echo "[$(date +%H:%M:%S)] FSINIT: Formatting rootfs"
        echo "$key_phrase" | cryptsetup luksFormat --type luks2 --cipher aes-xts-plain64 ${ROOTINTEGRITY} --pbkdf pbkdf2 -d- ${ROOT} || panic "FSINIT: Failed to format rootfs"
        echo "[$(date +%H:%M:%S)] FSINIT: Formatting rootfs done"
        echo "$key_phrase" | cryptsetup luksOpen --type luks2 -d- ${ROOT} rootfs_crypt || panic "FSINIT: Failed to open encrypted rootfs"
        mkfs.ext4 -L cloudimg-rootfs /dev/mapper/rootfs_crypt || panic "FSINIT: Failed to create ext4 filesystem"
        mount /dev/mapper/rootfs_crypt /root || panic "FSINIT: Failed to mount rootfs"

        echo "[$(date +%H:%M:%S)] FSINIT: Extracting rootfs, this may take a while..."
        extract_rootfs() {
            iohash sha256 -t /tmp/rootfs.hash | cpio -i
        }
        if [ -e ${INITDATA_DIR}/rootfs.cpio ]; then
            (cd /root && cat ${INITDATA_DIR}/rootfs.cpio | extract_rootfs) || panic "FSINIT: Failed to extract rootfs.cpio"
        else
            panic "FSINIT: No rootfs found"
        fi

        actual_rootfs_hash=$(cat /tmp/rootfs.hash)
        if [ -z "$actual_rootfs_hash" ]; then
            panic "FSINIT: Rootfs hash is empty"
        fi
        if [ $actual_rootfs_hash != $rootfs_hash ]; then
            panic "FSINIT: Rootfs hash mismatch"
        fi

        mkdir -p /root/app
        rm -rf /root/app/config
        cp -r ${CFG_DIR} /root/app/config
        echo "FSINIT: Copied config to /root/app/config"
        umount /root || panic "FSINIT: Failed to unmount /root"
        rm -f /config/format-disk || echo "FSINIT: Failed to remove format-disk"
    else
        echo "[$(date +%H:%M:%S)] FSINIT: Mounting"
        echo "$key_phrase" | cryptsetup luksOpen --type luks2 -d- ${ROOT} rootfs_crypt || panic "FSINIT: Failed to open encrypted rootfs"
    fi
    umount /config || panic "FSINIT: Failed to unmount /config"
    ROOT=/dev/mapper/rootfs_crypt
}

mountroot()
{
    echo "FSINIT: Mounting root"
    local_mount_root
}

mount_top()
{
    echo "FSINIT: Mounting top"
    local_top
}

mount_premount()
{
    echo "FSINIT: Pre-mounting"
    kmfs_premount
    local_premount
}

mount_bottom()
{
    echo "FSINIT: Bottom mounting"
    local_bottom
}
