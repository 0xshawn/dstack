syntax = "proto3";

import "google/protobuf/empty.proto";

package teepod;
// Information about a Virtual Machine (VM)
message VmInfo {
  // Unique identifier for the VM
  string id = 1;
  // Name of the VM
  string name = 2;
  // Current status of the VM (e.g., running, stopped)
  string status = 3;
  // Uptime in human-readable format
  string uptime = 4;
  // URL to the Tappd console
  optional string app_url = 5;
  // App ID
  string app_id = 6;
  // Instance ID
  optional string instance_id = 7;
  // Configuration of the VM
  VmConfiguration configuration = 8;
}

message Id {
  // Unique identifier for the VM
  string id = 1;
}

// Message for creating a VM request
message VmConfiguration {
  // Name of the VM
  string name = 1;
  // Image to be used for the VM
  string image = 2;
  // Compose file to be used for the VM
  string compose_file = 3;
  // Number of vCPUs
  uint32 vcpu = 4;
  // Memory in MB
  uint32 memory = 5;
  // Disk size in GB
  uint32 disk_size = 6;
  // Port mapping
  repeated PortMapping ports = 7;
}

// Message for port mapping
message PortMapping {
  // Protocol
  string protocol = 1;
  // Host port
  uint32 host_port = 2;
  // VM port
  uint32 vm_port = 3;
}

// Message for upgrading an app request
message UpgradeAppRequest {
  // ID of the VM
  string id = 1;
  // Compose file to be used for the VM
  string compose_file = 2;
}

// Message for VM list response
message StatusResponse {
  // List of VMs
  repeated VmInfo vms = 1;
  // Port mapping enabled
  bool port_mapping_enabled = 2;
}

// Service definition for Teepod
service Teepod {
  // RPC to create a VM
  rpc CreateVm(VmConfiguration) returns (Id);
  // RPC to start a VM
  rpc StartVm(Id) returns (google.protobuf.Empty);
  // RPC to stop a VM
  rpc StopVm(Id) returns (google.protobuf.Empty);
  // RPC to remove a VM
  rpc RemoveVm(Id) returns (google.protobuf.Empty);
  // RPC to upgrade an app
  rpc UpgradeApp(UpgradeAppRequest) returns (Id);

  // RPC to list all VMs
  rpc Status(google.protobuf.Empty) returns (StatusResponse);
  // RPC to list all available images
  rpc ListImages(google.protobuf.Empty) returns (ImageListResponse);
}

message ImageListResponse {
  repeated ImageInfo images = 1;
}

message ImageInfo {
  string name = 1;
  string description = 2;
}
