syntax = "proto3";

import "google/protobuf/empty.proto";

package tappd;

service Tappd {
  // Derive a key from a key path
  // Returns a key and a certificate chain
  rpc DeriveKey(DeriveKeyArgs) returns (DeriveKeyResponse) {}

  // Get a TDX quote
  rpc TdxQuote(TdxQuoteArgs) returns (TdxQuoteResponse) {}

  // Get worker info
  rpc Info(google.protobuf.Empty) returns (WorkerInfo) {}
}

// The request to derive a key
message DeriveKeyArgs {
  // Path to the key to derive
  string path = 1;
  // Subject of the certificate to request
  string subject = 2;
  // DNS alternative names for the certificate
  repeated string alt_names = 3;
}

// The response to a DeriveKey request
message DeriveKeyResponse {
  // Derived key
  string key = 1;
  // Certificate chain
  repeated string certificate_chain = 2;
}

// The request to get a TDX quote
// The report data is prefixed with `app-data:` before hashing unless the algorithm is `raw`.
// Final report data is hash(`app-data:` + report_data) if the algorithm is not `raw`.
message TdxQuoteArgs {
  // Report data
  bytes report_data = 1;
  // The hash algorithm to use to process the report data. Default is `sha512`.
  // Supported algorithms are:
  // - `sha256`
  // - `sha384`
  // - `sha512`
  // - `sha3-256`
  // - `sha3-384`
  // - `sha3-512`
  // - `keccak256`
  // - `keccak384`
  // - `keccak512`
  // - `raw`: Passes the report_data directly to the driver without any processing
  string hash_algorithm = 2;
}

message TdxQuoteResponse {
  // TDX quote
  bytes quote = 1;
  // Event log
  string event_log = 2;
}


service Worker {
  // Get worker info
  rpc Info(google.protobuf.Empty) returns (WorkerInfo) {}
  // Get system info
  rpc SysInfo(google.protobuf.Empty) returns (SystemInfo) {}
  // Get worker containers
  rpc ListContainers(google.protobuf.Empty) returns (ListContainersResponse) {}
}

message ListContainersResponse {
  repeated Container containers = 1;
}

message Container {
  // The ID of this container
  string id = 1;
  // The names that this container has been given
  repeated string names = 2;
  // The name of the image used when creating this container
  string image = 3;
  // The ID of the image that this container was created from
  string image_id = 4;
  // Command to run when starting the container
  string command = 5;
  // When the container was created
  int64 created = 6;
  // The state of this container (e.g. Exited)
  string state = 7;
  // The status of this container (e.g. Exited)
  string status = 8;
}

// The request to derive a key
message WorkerInfo {
  // App ID
  string app_id = 1;
  // App Instance ID
  string instance_id = 2;
  // App certificate
  string app_cert = 3;
  // TCB info
  string tcb_info = 4;
}

// The system info
message SystemInfo {
  // Operating system
  string os_name = 1;
  // Operating system version
  string os_version = 2;
  // Kernel version
  string kernel_version = 3;
  // Cpu model
  string cpu_model = 4;
  // Number of logical CPUs
  uint32 num_cpus = 5;
  // Total memory
  uint64 total_memory = 6;
  // Available memory
  uint64 available_memory = 7;
  // Used memory
  uint64 used_memory = 8;
  // Free memory
  uint64 free_memory = 9;
  // Total swap memory
  uint64 total_swap = 10;
  // Used swap memory
  uint64 used_swap = 11;
  // Free swap memory
  uint64 free_swap = 12;
  // Uptime
  uint64 uptime = 13;
  // Load average
  uint32 loadavg_one = 14;
  uint32 loadavg_five = 15;
  uint32 loadavg_fifteen = 16;
  // Disks
  repeated DiskInfo disks = 17;
}

message DiskInfo {
  // Device name
  string name = 1;
  // Mount point
  string mount_point = 2;
  // Total size
  uint64 total_size = 3;
  // Free size
  uint64 free_size = 5;
}
